import ClickHandler;import nav.SideNav;class nav.TextBtn extends MovieClip{	private var btnMc:MovieClip;	private var xmlObj:Object;	private var titleTxt:TextField;	private var dumBtn:MovieClip;	private var colorObj:Color;						// Probably SideNav.as	private var activeColor:Number = 0xC38400;	private var rollColor:Number   = 0xC38400;	private var baseColor:Number   = 0x403F32;	private var inactColor:Number  = 0xb8b5a2;	private var cbObj:Object;	private var cbFn:String;	private var URLstring:String;		// These can be set via xml, Then handled in the ClickHandler	private var releaseFunction:String;	private var releaseParams:Array;	private var rollOverFunction:String;	private var rollOverParams:Array;	private var rollOutFunction:String;	private var rollOutParams:Array;		private var baubleIndex:Number;	private var sideNav:SideNav;		public function TextBtn( $navMc:MovieClip,		 					 $dep:Number,							 $x:Number,							 $y:Number )	{		btnMc = $navMc.attachMovie('txtBtn', 'btn' + $dep, $dep, {_x:$x, _y:$y} );		dumBtn = btnMc.dumBtn;		titleTxt = btnMc.txtHolder.titleTxt;						titleTxt.autoSize = true;		colorObj = new Color(btnMc.txtHolder);				// todo: Figure out the txtBtn kerning issue.		// var fmt1:TextFormat = new TextFormat();		// fmt1.letterSpacing = 1.2;		// fmt1.kerning = true;		// titleTxt.setTextFormat(fmt1);			}		public function setInfo ( $xmlObj:Object, 							  $releaseFunction:String,							  $rollOverFunction:String,							  $rollOutFunction:String ):Void	{		xmlObj = $xmlObj;		titleTxt.text = getTitleTxt();		if( $xmlObj.clickable != 'false' )		{			// Set Event handlers			dumBtn.con        = this;			dumBtn._width     = 200;			dumBtn.onRollOver = function(){this.con.RollOver(); };			dumBtn.onRollOut  = function(){this.con.RollOut(); };			dumBtn.onRelease  = function(){this.con.Release(); };			releaseFunction   = ( $xmlObj.releaseFunction == undefined )? $releaseFunction : $xmlObj.releaseFunction ;			rollOverFunction  = ( $xmlObj.rollOver == undefined )? $rollOverFunction : $xmlObj.rollOver;			rollOutFunction   = ( $xmlObj.rollOut == undefined )? $rollOutFunction : $xmlObj.rollOut;			releaseParams     = ( $xmlObj.releaseParams == undefined )? '' : $xmlObj.releaseParams.split(',');			rollOverParams    = ( $xmlObj.rollOverParams == undefined )? '' : $xmlObj.rollOverParams.split(',');			rollOutParams     = ( $xmlObj.rollOutParams == undefined )? '' : $xmlObj.rollOutParams.split(',');					}		else		{			colorObj.setRGB( inactColor );		}	}			//---- Release Handlers ---------//	public function Release (  ):Void	{		ClickHandler[releaseFunction](this);		ClickHandler.sendUrlChange(URLstring);		colorObj.setRGB( activeColor );		// Probably "SideNav.mainBtnClick"		cbObj[cbFn]( this );	}		public function RollOver (  ):Void	{		ClickHandler[rollOverFunction](this);		colorObj.setRGB( rollColor );		cbObj.btnRoll(this);	}		public function RollOut (  ):Void	{		// todo: set conditional check to see if		// this is the active button and should		// not change the color		ClickHandler[rollOutFunction](this);		colorObj.setRGB( baseColor );		cbObj.btnRollOut(this);	}	 	private function getTitleTxt (  ):String	{		return xmlObj.title;	} 		public function baubleExists (  ):Boolean	{		return (xmlObj.bauble != undefined)? true : false ;	}		public function rollOverBaubles (  ):Void	{		var ar:Array = getBaubleArray();		var len:Number = ar.length;		for ( var i:Number=0; i<len; i++ ) 		{			var baubleCon = sideNav.getBaubleControl();			baubleCon.sendBaubleEvent( ar[i], 'rollOver');		}	}		public function rollOutBaubles (  ):Void	{		var ar:Array = getBaubleArray()		var len:Number = ar.length;		for ( var i:Number=0; i<len; i++ ) 		{			var baubleCon = sideNav.getBaubleControl();			baubleCon.sendBaubleEvent( ar[i], 'rollOut');		}	}		//----------- Getters and Setters ------------//		public function getBaubleArray     (  )			   :Array  { return xmlObj.bauble.split(','); };	public function setBaubleIndex     ( $ind:Number ) :Void    { baubleIndex = $ind; };	public function getBaubleIndex     ( $ind:Number ) :Number  { return baubleIndex; };	public function getXmlObj	       (  )			   :Object  { return xmlObj; };	public function getReleaseParams   (  )			   :Array   { return releaseParams; };	public function getRollOverParams  (  )			   :Array   { return rollOverParams; };	public function getRollOutParams   (  )			   :Array   { return rollOutParams; };	public function setURLString	   ( $str:String ) :Void	{ URLstring = $str; };	public function setCallBackInfo    ( $obj:Object, $fn:String ):Void	{		cbObj = $obj; 		cbFn = $fn;	}		public function setSideNav ( $sideNav:SideNav ):Void	{		sideNav = $sideNav;	}		}