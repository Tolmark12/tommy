import baubles.Bauble;import Loading.ImageLoaderListener;import PathFinder;import nav.TextBtn;import ClickHandler;class baubles.BaubleControl{	private var baubleLoadAr:Array;	private var baubleDisplayAr:Array;	private var baubleObj:Object;	private var maskObj:Object;	private var mainMc:MovieClip;	private var altMc:MovieClip;	private var baubleInd:Number;	private var stageBaubles:Object;	private var currentBaubleStillShowing:Boolean;	private var hiddenBaubles:Array;		public function BaubleControl( $mainMc:MovieClip, 		 						   $altMc:MovieClip )	{		stageBaubles    = new Object		mainMc 		    = $mainMc;			// This is above any embedded content (default)		altMc			= $altMc;			// This is below any embedded content		baubleLoadAr    = new Array();		baubleDisplayAr = new Array();		hiddenBaubles   = new Array();		baubleObj 	    = new Object();		baubleInd 	    = 1;	}		public function initBaubles ( $xml:Object ):Void	{		var depth = 1;		for(var i:String in $xml)		{			var dep:Number = depth++;			var loadMc:MovieClip = (Number($xml[i].depth) > 0 or $xml[i].depth == undefined)? mainMc : altMc;			if($xml[i].depth != undefined)			{				dep = 1000 - Math.abs( Number($xml[i].depth) );			}						var baubl:Bauble = baubleObj[i] = new Bauble();			ClickHandler.registerBaubleForCommands( i, baubl );			baubl.setInfo( $xml[i], loadMc, dep, this );			if( $xml[i].fade == "hide" )				hiddenBaubles.push(baubl);			baubleLoadAr.push( baubl );		}				currentBaubleStillShowing = false;		loadNextBauble (  );	}		// Called by SideNav.as, returns the index of the bauble	// so that its sister button can send it event info and 	// connect it to its sister button	public function associateSisterWithBtn ( $baubleNameAr:Array, $btn:TextBtn ):Void	{		var len:Number = $baubleNameAr.length;		for ( var i:Number=0; i<len; i++ ) 		{			baubleObj[ $baubleNameAr[i] ].associateSisterWithBtn( $btn );		}			}		// Displaying the baubles	private function addBaubleToDisplayList ( $baubleObj:Bauble ):Void	{		baubleDisplayAr.push( $baubleObj );		displayNextBauble();	}		public function displayNextBauble (  ):Void	{		if(baubleDisplayAr.length > 0 && !currentBaubleStillShowing)		{			currentBaubleStillShowing = true;			var bauble = baubleDisplayAr.pop();			bauble.show();		}	}		public function baubleDisplayedCallBack ( $bauble:Bauble ):Void	{		ClickHandler.notifyThatBaubleIsVisible ( $bauble )		currentBaubleStillShowing = false;		displayNextBauble();	}		// Loading The Baubles	public function loadNextBauble (  ):Void	{		if( baubleLoadAr.length != 0 )		{			var bauble = baubleLoadAr.pop();			var mc:MovieClip = bauble.getImageHolder();			mc._alpha = 0;						var listener = new ImageLoaderListener();			listener.setCallBack(this, 'baubleLoadedCallBack', [bauble] );					var movieClipLoader:MovieClipLoader = new MovieClipLoader();			movieClipLoader.addListener(listener);			movieClipLoader.loadClip( PathFinder.getSwfPath() + bauble.getFileToLoad() , mc );		}else{			//trace('no more baubles to load')		}	}		public function baubleLoadedCallBack ( $justLoadedBauble:Bauble ):Void	{		ClickHandler.notifyThatBaubleIsLoaded( $justLoadedBauble, baubleLoadAr.length );				$justLoadedBauble.loadedCallBack();		addBaubleToDisplayList($justLoadedBauble);		displayNextBauble();		loadNextBauble();	}			// Event Handling	public function sendBaubleEvent ( $id:String, $event:String ):Void	{		 	var bauble:Bauble = baubleObj[ $id ];	 	switch($event)	 	{	 		case "rollOver":	 		bauble.RollOver();	 		break;	 		 		case "rollOut":	 		bauble.RollOut();	 		break;	 	}			}		// Associate bauble with a mask	public function registerBaubleMasks ( $ar:Array ):Void	{		maskObj = Object;		// Pull mcs into the bauble mask obj		var len:Number = $ar.length;		for ( var i:Number=0; i<len; i++ ) 		{			maskObj[ $ar[i]._name ] = $ar[i];		}	}		public function getMaskMc ( $id:String ):MovieClip	{		return maskObj[$id];	}			// Stage Event handling	public function addBaubleToStageResize ( $bauble:Bauble ):Void	{		Stage.addListener(this);		stageBaubles[$bauble.getUniqeName()] = $bauble	}		public function onResize (  ):Void	{		for( var i:String in stageBaubles )		{			stageBaubles[i].setPositions();		}	}		// Called by "ClickHandler.as"	public function getBaubleByName ( $baubleName:String ):Bauble	{		return baubleObj[$baubleName]	}		// Called by "ClickHandler.as"	public function showHiddenElements (  ):Void	{		var len:Number = hiddenBaubles.length;		for ( var i:Number=0; i<len; i++ ) 		{			hiddenBaubles[i].simpleShow( 40 );		}	}}